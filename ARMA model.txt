import pandas as pd
import numpy as np

df = pd.read_csv('C:\\Time series datasets\\bandwidth.csv')


import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.plot(df.hourly_bandwidth)
ax.set_xlabel('Time')
ax.set_ylabel('Hourly bandwith usage (MBps)')

plt.xticks(np.arange(0, 10000, 730), 
 ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
 'Nov', 'Dec', '2020', 'Feb'])

fig.autofmt_xdate()
plt.tight_layout()



from statsmodels.tsa.stattools import adfuller

ADF_result = adfuller(df['hourly_bandwidth'])
print(f'ADF Statistic: {ADF_result[0]}')
print(f'p-value: {ADF_result[1]}')


bandwidth_diff = np.diff(df.hourly_bandwidth, n=1)

ADF_result = adfuller(bandwidth_diff)
print(f'ADF Statistic: {ADF_result[0]}')
print(f'p-value: {ADF_result[1]}')



df_diff = pd.DataFrame({'bandwidth_diff': bandwidth_diff})

train = df_diff[:-168]
test = df_diff[-168:] 

print(len(train))
print(len(test))



fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(10, 8))
ax1.plot(df.hourly_bandwidth)
ax1.set_xlabel('Time')
ax1.set_ylabel('Hourly bandwidth')
ax1.axvspan(9831, 10000, color='#808080', alpha=0.2)

ax2.plot(df_diff.bandwidth_diff)
ax2.set_xlabel('Time')
ax2.set_ylabel('Hourly bandwidth (diff)')
ax2.axvspan(9830, 9999, color='#808080', alpha=0.2)
plt.xticks(
 np.arange(0, 10000, 730), 
 ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
 'Nov', 'Dec', '2020', 'Feb'])

fig.autofmt_xdate()
plt.tight_layout()


#Function to fit all unique ARMA(p,q) models
from typing import Union
from tqdm.notebook import tqdm
from statsmodels.tsa.statespace.sarimax import SARIMAX


def optimize_ARMA(endog: Union[pd.Series, list], order_list: list) -> pd.DataFrame:

     results = [] 
 
     for order in tqdm(order_list): 
          try: 
               model = SARIMAX(endog, order=(order[0], 0, order[1]), simple_differencing=False).fit(disp=False) 
          except:
               continue
 
          aic = model.aic 
          results.append([order, aic]) 
 
     result_df = pd.DataFrame(results) 
     result_df.columns = ['(p,q)', 'AIC'] 
 
     #Sort in ascending order, lower AIC is better
     result_df = result_df.sort_values(by='AIC', ascending=True).reset_index(drop=True)  
     return result_df



from itertools import product

ps = range(0, 4, 1) 
qs = range(0, 4, 1) 
order_list = list(product(ps, qs))


result_df = optimize_ARMA(train['bandwidth_diff'], order_list)
result_df


#Q-Q plot
model = SARIMAX(train['bandwidth_diff'], order= (2,0,2), 
simple_differencing=False)
model_fit = model.fit(disp=False)
model_fit.plot_diagnostics(figsize=(10, 8));



#Ljung-Box test
from statsmodels.stats.diagnostic import acorr_ljungbox

residuals = model_fit.resid
pvalue = acorr_ljungbox(residuals, np.arange(1, 11, 1))
print(pvalue)



#A function to perform a rolling forecast on a horizon
def rolling_forecast(df: pd.DataFrame, train_len: int, horizon: int, 
window: int, method: str) -> list:
 
     total_len = train_len + horizon
     end_idx = train_len
 
     if method == 'mean':
          pred_mean = []
 
          for i in range(train_len, total_len, window):
               mean = np.mean(df[:i].values)
               pred_mean.extend(mean for _ in range(window)) 
          return pred_mean

     elif method == 'last':
          pred_last_value = []
 
          for i in range(train_len, total_len, window):
               last_value = df[:i].iloc[-1].values[0]
               pred_last_value.extend(last_value for _ in range(window))
          return pred_last_value
 
     elif method == 'ARMA':
          pred_ARMA = []
 
          for i in range(train_len, total_len, window):
               model = SARIMAX(df[:i], order=(2,0,2)) 
               res = model.fit(disp=False)
               predictions = res.get_prediction(0, i + window - 1)
               oos_pred = predictions.predicted_mean.iloc[-window:]
               pred_ARMA.extend(oos_pred)
          return pred_ARMA




pred_df = test.copy()

TRAIN_LEN = len(train)
HORIZON = len(test)
WINDOW = 2

pred_mean = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'mean')
pred_last_value = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'last')
pred_ARMA = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'ARMA')

test.loc[:, 'pred_mean'] = pred_mean
test.loc[:, 'pred_last_value'] = pred_last_value
test.loc[:, 'pred_ARMA'] = pred_ARMA

pred_df.head()



#plotting and visualizing the forecasts for each method
fig, ax = plt.subplots()

ax.plot(df_diff['bandwidth_diff'])
ax.plot(test['bandwidth_diff'], 'b-', label='actual')
ax.plot(test['pred_mean'], 'g:', label='mean')
ax.plot(test['pred_last_value'], 'r-.', label='last')
ax.plot(test['pred_ARMA'], 'k--', label='ARMA(2,2)')
ax.legend(loc=2)
ax.set_xlabel('Time')
ax.set_ylabel('Hourly bandwidth (diff)')

ax.axvspan(9830, 9999, color='#808080', alpha=0.2) 
ax.set_xlim(9800, 9999) 

plt.xticks([9802, 9850, 9898, 9946, 9994],
 ['2020-02-13', '2020-02-15', '2020-02-17', '2020-02-19', '2020-02-21'])

fig.autofmt_xdate()
plt.tight_layout()



#MSE measure for each method
from sklearn.metrics import mean_squared_error

mse_mean = mean_squared_error(test['bandwidth_diff'], test['pred_mean'])
mse_last = mean_squared_error(test['bandwidth_diff'], test['pred_last_value'])
mse_ARMA = mean_squared_error(test['bandwidth_diff'], test['pred_ARMA'])

print(mse_mean, mse_last, mse_ARMA)



#reversing the differencing transformation of forecast
df['pred_bandwidth'] = pd.Series()
df['pred_bandwidth'][9832:] = df['hourly_bandwidth'].iloc[9832] + test['pred_ARMA'].cumsum()




#plotting the forecasts on the original scale of the data
fig, ax = plt.subplots()

ax.plot(df['hourly_bandwidth'])
ax.plot(df['hourly_bandwidth'], 'b-', label='actual')
ax.plot(df['pred_bandwidth'], 'k--', label='ARMA(2,2)')
ax.legend(loc=2)
ax.set_xlabel('Time')
ax.set_ylabel('Hourly bandwith usage (MBps)')

ax.axvspan(9831, 10000, color='#808080', alpha=0.2)
ax.set_xlim(9800, 9999)
plt.xticks([9802, 9850, 9898, 9946, 9994],
 ['2020-02-13', '2020-02-15', '2020-02-17', '2020-02-19', '2020-02-21'])

fig.autofmt_xdate()
plt.tight_layout()




#measuring the MAE of the undifferenced predictions
from sklearn.metrics import mean_absolute_error

mae_ARMA_undiff = mean_absolute_error(df['hourly_bandwidth'][9832:], 
df['pred_bandwidth'][9832:])

print(mae_ARMA_undiff)














