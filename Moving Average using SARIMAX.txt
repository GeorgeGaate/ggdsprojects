import pandas as pd

df = pd.read_csv('C:\Time series datasets\widget_sales.csv')

df.head()


import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.plot(df['widget_sales']) 
ax.set_xlabel('Time') 
ax.set_ylabel('Widget sales (k$)') 

plt.xticks([0, 30, 57, 87, 116, 145, 175, 204, 234, 264, 293,
 323, 352, 382, 409, 439, 468, 498], 
 ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
 'Nov', 'Dec', '2020', 'Feb', 'Mar', 'Apr', 'May', 'Jun']) 

fig.autofmt_xdate() 
plt.tight_layout()


#test for stationarity
from statsmodels.tsa.stattools import adfuller

ADF_result = adfuller(df['widget_sales']) 

print(f'ADF Statistic: {ADF_result[0]}') 
print(f'p-value: {ADF_result[1]}')


#apply transformations to make it stationary
import numpy as np

widget_sales_diff = np.diff(df['widget_sales'], n=1)


fig, ax = plt.subplots()

ax.plot(widget_sales_diff)
ax.set_xlabel('Time') 
ax.set_ylabel('Widget sales differenced (k$)') 

plt.xticks([0, 30, 57, 87, 116, 145, 175, 204, 234, 264, 293,
 323, 352, 382, 409, 439, 468, 498], 
 ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct',
 'Nov', 'Dec', '2020', 'Feb', 'Mar', 'Apr', 'May', 'Jun']) 

fig.autofmt_xdate() 
plt.tight_layout()


ADF_result = adfuller(widget_sales_diff) 

print(f'ADF Statistic: {ADF_result[0]}')
print(f'p-value: {ADF_result[1]}')


#plot the autocorrelation function
from statsmodels.graphics.tsaplots import plot_acf

plot_acf(widget_sales_diff, lags=30); 
plt.tight_layout()



#Forecasting a moving average process
df_diff = pd.DataFrame({'widget_sales_diff': widget_sales_diff}) 

train = df_diff[:int(0.9*len(df_diff))] 
test = df_diff[int(0.9*len(df_diff)):]

print(len(train))
print(len(test))



#Visualizing the forecasting period for the differenced and original series
fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True) 

ax1.plot(df['widget_sales'])
ax1.set_xlabel('Time')
ax1.set_ylabel('Widget sales (k$)')
ax1.axvspan(450, 500, color='#808080', alpha=0.2)

ax2.plot(df_diff['widget_sales_diff'])
ax2.set_xlabel('Time')
ax2.set_ylabel('Widget sales - diff (k$)')
ax2.axvspan(449, 498, color='#808080', alpha=0.2)

plt.xticks(
 [0, 30, 57, 87, 116, 145, 175, 204, 234, 264, 293, 323, 352, 382, 409, 
439, 468, 498], 
 ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 
'Nov', 'Dec', '2020', 'Feb', 'Mar', 'Apr', 'May', 'Jun'])

fig.autofmt_xdate()
plt.tight_layout()



from statsmodels.tsa.statespace.sarimax import SARIMAX

def rolling_forecast(df: pd.DataFrame, train_len: int, horizon: int,
 window: int, method: str) -> list: 
 
     total_len = train_len + horizon
 
     if method == 'mean':
          pred_mean = []
 
          for i in range(train_len, total_len, window):
               mean = np.mean(df[:i].values)
               pred_mean.extend(mean for _ in range(window))
          return pred_mean

     elif method == 'last':
          pred_last_value = []
 
          for i in range(train_len, total_len, window):
               last_value = df[:i].iloc[-1].values[0]
               pred_last_value.extend(last_value for _ in range(window))
          return pred_last_value


     elif method == 'MA':
          pred_MA = []
 
          for i in range(train_len, total_len, window):
               model = SARIMAX(df[:i], order=(0,0,2)) 
               res = model.fit(disp=False)
               predictions = res.get_prediction(0, i + window - 1)
               oos_pred = predictions.predicted_mean.iloc[-window:] 
               pred_MA.extend(oos_pred)
          return pred_MA


pred_df = test.copy()

TRAIN_LEN = len(train)
HORIZON = len(test)
WINDOW = 2

pred_mean = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'mean')
pred_last_value = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'last')
pred_MA = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'MA')

pred_df['pred_mean'] = pred_mean
pred_df['pred_last_value'] = pred_last_value
pred_df['pred_MA'] = pred_MA

pred_df.head()


from sklearn.metrics import mean_squared_error

mse_mean = mean_squared_error(pred_df['widget_sales_diff'], pred_df['pred_mean'])
mse_last = mean_squared_error(pred_df['widget_sales_diff'], pred_df['pred_last_value'])
mse_MA = mean_squared_error(pred_df['widget_sales_diff'], pred_df['pred_MA'])

print(mse_mean, mse_last, mse_MA)


#Inverse-transform the predictions to bring them back to the original scale of the dataset.
df['pred_widget_sales'] = pd.Series() 
df['pred_widget_sales'][450:] = df['widget_sales'].iloc[450] + pred_df['pred_MA'].cumsum()



#Visualizing our untransformed predictions against the recorded data.
fig, ax = plt.subplots()

ax.plot(df['widget_sales'], 'b-', label='actual') 
ax.plot(df['pred_widget_sales'], 'k--', label='MA(2)') 

ax.legend(loc=2)

ax.set_xlabel('Time')
ax.set_ylabel('Widget sales (K$)')

ax.axvspan(450, 500, color='#808080', alpha=0.2)

ax.set_xlim(400, 500)

plt.xticks(
 [409, 439, 468, 498], 
 ['Mar', 'Apr', 'May', 'Jun'])

fig.autofmt_xdate()
plt.tight_layout()


#Measuring the mean absolute error (MAE)
from sklearn.metrics import mean_absolute_error

mae_MA_undiff = mean_absolute_error(df['widget_sales'].iloc[450:], 
df['pred_widget_sales'].iloc[450:])

print(mae_MA_undiff)










