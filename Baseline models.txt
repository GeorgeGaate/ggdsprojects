#import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#load the dataset
df=pd.read_csv('C:\Time series datasets\jj.csv')

#display the first five entries of the dataset
df.head()

#display the last five entries of the dataset
df.tail()

#split the dataset into train and test sets
train = df[:-4]     #all except last four values
test = df[-4:].copy()        #only the last four values 

#1. predicting using arithmetic mean of the entire train set
#compute the arithmetic mean of the data column in the train set using numpy.
historical_mean = np.mean(train['data']) 
print(historical_mean)

#create a new column that holds the historical mean of the training set as a forecast:
test['pred_mean'] = historical_mean

#define and calculate an error metric
def mape(y_true, y_pred):
      return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape_hist_mean = mape(test['data'], test['pred_mean'])
print(mape_hist_mean)

#Visualizing our forecasts
fig, ax = plt.subplots()

ax.plot(train['date'], train['data'], 'g-.', label='Train')
ax.plot(test['date'], test['data'], 'b-', label='Test')
ax.plot(test['date'], test['pred_mean'], 'r--', label='Predicted')
ax.set_xlabel('Date')
ax.set_ylabel('Earnings per share (USD)')
ax.axvspan(80, 83, color='#808080', alpha=0.2)
ax.legend(loc=2)

plt.xticks(np.arange(0, 84, 8), [1960, 1962, 1964, 1966, 1968, 1970, 1972, 
1974, 1976, 1978, 1980])

fig.autofmt_xdate()
plt.tight_layout()
plt.show()


#predicting using mean of the last year for next year values
last_year_mean = np.mean(train.data[-4:])
print(last_year_mean)

test.loc[:, 'pred__last_yr_mean'] = last_year_mean
mape_last_year_mean = mape(test['data'], test['pred__last_yr_mean'])
print(mape_last_year_mean)


#predicting using last value for next year's values
last = train.data.iloc[-1]
print(last)

test.loc[:, 'pred_last'] = last
mape_last = mape(test['data'], test['pred_last'])
print(mape_last)

#predicting using last year seasonal patterns for next year's quarters patterns
test.loc[:, 'pred_last_season'] = train['data'][-4:].values

def mape(y_true, y_pred):
      return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape_naive_seasonal = mape(test['data'], test['pred_last_season'])
print(mape_naive_seasonal)

fig, ax = plt.subplots()

ax.plot(train['date'], train['data'], 'g-.', label='Train')
ax.plot(test['date'], test['data'], 'b-', label='Test')
ax.plot(test['date'], test['pred_last_season'], 'r--', label='Predicted')
ax.set_xlabel('Date')
ax.set_ylabel('Earnings per share (USD)')
ax.axvspan(80, 83, color='#808080', alpha=0.2)
ax.legend(loc=2)

plt.xticks(np.arange(0, 85, 8), [1960, 1962, 1964, 1966, 1968, 1970, 1972, 
1974, 1976, 1978, 1980])

fig.autofmt_xdate()
plt.tight_layout()