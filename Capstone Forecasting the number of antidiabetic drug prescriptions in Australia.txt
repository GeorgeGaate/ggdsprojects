import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from itertools import product
from statsmodels.tsa.seasonal import seasonal_decompose, STL

df = pd.read_csv('C:\\Time series datasets\\AusAntidiabeticDrug.csv')
print(df.shape)


#Visualizing the series and its components
fig, ax = plt.subplots()
ax.plot(df.y)
ax.set_xlabel('Date')
ax.set_ylabel('Number of anti-diabetic drug prescriptions')
plt.xticks(np.arange(6, 203, 12), np.arange(1992, 2009, 1))
fig.autofmt_xdate()
plt.tight_layout()

#decomposition to visualize the different components
decomposition = STL(df.y, period=12).fit() 
fig, (ax1, ax2, ax3, ax4) = plt.subplots(nrows=4, ncols=1, sharex=True, figsize=(10,8))

ax1.plot(decomposition.observed)
ax1.set_ylabel('Observed')

ax2.plot(decomposition.trend)
ax2.set_ylabel('Trend')

ax3.plot(decomposition.seasonal)
ax3.set_ylabel('Seasonal')

ax4.plot(decomposition.resid)
ax4.set_ylabel('Residuals')

plt.xticks(np.arange(6, 203, 12), np.arange(1992, 2009, 1))
fig.autofmt_xdate()
plt.tight_layout()


#Modeling the data
#first determine whether the series is stationary
from statsmodels.tsa.stattools import adfuller

ad_fuller_result = adfuller(df.y)
print(f'ADF Statistic: {ad_fuller_result[0]}')
print(f'p-value: {ad_fuller_result[1]}')


#apply transformations to make it stationary
y_diff = np.diff(df.y, n=1)
ad_fuller_result = adfuller(y_diff)
print(f'ADF Statistic: {ad_fuller_result[0]}')
print(f'p-value: {ad_fuller_result[1]}')


#apply a seasonal difference
y_diff_seasonal_diff = np.diff(y_diff, n=12) 
ad_fuller_result = adfuller(y_diff_seasonal_diff)
print(f'ADF Statistic: {ad_fuller_result[0]}')
print(f'p-value: {ad_fuller_result[1]}')


ps = range(0, 5, 1)
qs = range(0, 5, 1)
Ps = range(0, 5, 1)
Qs = range(0, 5, 1)

order_list = list(product(ps, qs, Ps, Qs))

d = 1
D = 1
s = 12


#Performing model selection
train = df.y[:168]
test = df.y[168:]
print(len(test))


#Function to find the values of p, q, P, and Q that minimize the AIC
from typing import Union
from tqdm.notebook import tqdm 
from statsmodels.tsa.statespace.sarimax import SARIMAX

def optimize_SARIMAX(endog: Union[pd.Series, list], exog: Union[pd.Series, list], order_list: list, d: int, D: int, s: int) -> pd.DataFrame:
     results = []
     for order in tqdm(order_list):
          try: 
               model = SARIMAX( endog, exog,
 order=(order[0], d, order[1]),
 seasonal_order=(order[2], D, order[3], s),
 simple_differencing=False).fit(disp=False)
          except:
               continue 
          aic = model.aic
          results.append([order, model.aic]) 
     result_df = pd.DataFrame(results)
     result_df.columns = ['(p,q,P,Q)', 'AIC']
 
     #Sort in ascending order, lower AIC is better
     result_df = result_df.sort_values(by='AIC', ascending=True).reset_index(drop=True) 
     return result_df



SARIMA_result_df = optimize_SARIMAX(train, order_list, d, D, s)
SARIMA_result_df




#residual analysis
SARIMA_model = SARIMAX(train, order=(3,1,1), seasonal_order=(1,1,3,12), simple_differencing=False)
SARIMA_model_fit = SARIMA_model.fit(disp=False)
SARIMA_model_fit.plot_diagnostics(figsize=(10,8));


from statsmodels.stats.diagnostic import acorr_ljungbox
residuals = SARIMA_model_fit.resid
pvalue = acorr_ljungbox(residuals, np.arange(1, 11, 1))
print(pvalue)


#Forecasting and evaluating the modelâ€™s performance
def rolling_forecast(df: pd.DataFrame, train_len: int, horizon: int, window: int, method: str) -> list:
     total_len = train_len + horizon
     end_idx = train_len
     if method == 'last_season':
          pred_last_season = [] 
          for i in range(train_len, total_len, window):
               last_season = df['y'][i-window:i].values
               pred_last_season.extend(last_season) 
          return pred_last_season 
     elif method == 'SARIMA':
          pred_SARIMA = [] 
          for i in range(train_len, total_len, window):
               model = SARIMAX(df['y'][:i], order=(3,1,1), seasonal_order=(1,1,3,12), simple_differencing=False)
               res = model.fit(disp=False)
               predictions = res.get_prediction(0, i + window - 1)
               oos_pred = predictions.predicted_mean.iloc[-window:]
               pred_SARIMA.extend(oos_pred)
          return pred_SARIMA



pred_df = df[168:]

TRAIN_LEN = 168
HORIZON = 36
WINDOW = 12
pred_df['last_season'] = rolling_forecast(df, TRAIN_LEN, HORIZON, WINDOW, 'last_season')
pred_df['SARIMA'] = rolling_forecast(df, TRAIN_LEN, HORIZON, WINDOW, 'SARIMA')


#visualize forecasts
fig, ax = plt.subplots()

ax.plot(df.y)
ax.plot(pred_df.y, 'b-', label='actual')
ax.plot(pred_df.last_season, 'r:', label='naive seasonal')
ax.plot(pred_df.SARIMA, 'k--', label='SARIMA')
ax.set_xlabel('Date')
ax.set_ylabel('Number of anti-diabetic drug prescriptions')
ax.axvspan(168, 204, color='#808080', alpha=0.2)

ax.legend(loc=2)

plt.xticks(np.arange(6, 203, 12), np.arange(1992, 2009, 1))
plt.xlim(120, 204)

fig.autofmt_xdate()
plt.tight_layout()




def mape(y_true, y_pred):
     return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape_naive_seasonal = mape(pred_df.y, pred_df.last_season)
mape_SARIMA = mape(pred_df.y, pred_df.SARIMA)
print(mape_naive_seasonal, mape_SARIMA)


#bar chart visualization
fig, ax = plt.subplots()
x = ['naive seasonal', 'SARIMA(2,1,3)(1,1,3,12)']
y = [mape_naive_seasonal, mape_SARIMA]
ax.bar(x, y, width=0.4)
ax.set_xlabel('Models')
ax.set_ylabel('MAPE (%)')
ax.set_ylim(0, 15)
for index, value in enumerate(y):
     plt.text(x=index, y=value + 1, s=str(round(value,2)), ha='center')

plt.tight_layout()

























